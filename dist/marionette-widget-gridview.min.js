Backbone.Widget=Backbone.Model.extend({defaults:{type:"default",viewType:"WidgetView",name:"noname",x:0,y:0,width:0,height:0,widgetId:0},getWidgetProperties:function(){return{x:this.get("x"),y:this.get("y"),width:this.get("width"),height:this.get("height"),el:'<div class="grid-stack-item"><div class="grid-stack-item-content"><div id="'+this.get("widgetId")+'" class="widget-content"></div></div></div>'}},isDefaultView:function(){return this.get("viewType")===this.getDefaultView()},getDefaultView:function(){return"WidgetView"}}),Backbone.WidgetList=Backbone.Collection.extend({model:Backbone.Widget}),Marionette.WidgetView=Marionette.ItemView.extend({template:_.template("<p><%= position() %></p>"),modelEvents:{change:"render"},templateHelpers:function(){return{position:function(){return"("+this.x+","+this.y+")"}}}}),Marionette.WidgetGridView=Marionette.LayoutView.extend({template:"#gridview-template",collectionEvents:{add:"addGridstackWidget"},initialize:function(a){if(a=a||{},console.log(a),a.hasOwnProperty("autoPos")||(a.autoPos=!0),a.gsOptions||(a.gsOptions={}),!a.collection)throw new Error("Missing collection inside initialization options");this.options=a},onRender:function(){this.initializeGridstack()},setAutoPos:function(a){this.options.autoPos=a},initializeGridstack:function(){this.$(".grid-stack").gridstack(this.options.gsOptions),this.gridstack=this.$(".grid-stack").data("gridstack");var a=this;this.$(".grid-stack").on("change",function(b,c){a.updateModelsAttributes(b,c)})},addGridstackWidget:function(a){var b=a.getWidgetProperties(),c=a.get("widgetId");if(this.gridstack.will_it_fit(b.x,b.y,b.width,b.height,this.options.autoPos)){if(this.gridstack.add_widget(b.el,b.x,b.y,b.width,b.height,this.options.autoPos),this.addRegion(c,"#"+c),this.options.autoPos){var d=this.$("#"+c).closest(".grid-stack-item"),e=d.data("gs-x"),f=d.data("gs-y");a.set({x:e,y:f})}a.save(),this.showWidget(a)}else console.log("Not enough free space to place the widget id : "+a.get("widgetId"))},showWidget:function(a){var b;this.options.customViews?this.options.customViews[a.get("viewType")]?b=new(this.options.customViews[a.get("viewType")])({model:a}):(a.isDefaultView()||(console.log("Model has a custom view but it is not defined in the options, a default view will be displayed instead"),a.set("viewType",a.getDefaultView()).save()),b=new Marionette.WidgetView({model:a})):(a.isDefaultView()||(console.log("Model has a custom view but none is defined in the options, a default view will be displayed instead"),a.set("viewType",a.getDefaultView()).save()),b=new Marionette.WidgetView({model:a})),this.getRegion(a.get("widgetId")).show(b)},updateModelsAttributes:function(a,b){_.each(b,function(a){var b=$(a.el[0]).find(".widget-content").attr("id"),c=a.x,d=a.y,e=a.width,f=a.height;this.collection.findWhere({widgetId:parseInt(b)}).set({x:c,y:d,width:e,height:f}).save()},this)}});